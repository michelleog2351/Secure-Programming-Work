This regex ensures that a password meets the following criteria: 
✅ At least 9 characters
✅ Contains at least one lowercase letter (a-z)
✅ Contains at least one uppercase letter (A-Z)
✅ Contains at least one digit (0-9)
✅ Contains at least one special character (!@#$%^&* etc.)

Breaking It Down:
1️⃣ ^ (Start of string)
Ensures the match starts at the beginning of the input.

------------------------------------------------------------------------------
2️⃣ (?=.*[a-z]) (At least one lowercase letter)
?= is a positive lookahead (ensures a condition without consuming characters).
.*[a-z] means "any characters (.*) followed by at least one lowercase letter ([a-z]) somewhere in the string".
✅ password1! ✅ HelloWorld9#

------------------------------------------------------------------------------
3️⃣ (?=.*[A-Z]) (At least one uppercase letter)
Works the same way as lowercase but for uppercase letters (A-Z).
✅ HelloWorld1!
❌ helloworld1! (missing uppercase)

------------------------------------------------------------------------------
4️⃣ (?=.*\d) (At least one digit)
\d matches any digit (0-9).
✅ Secure#123 ✅ Hello123!
❌ NoNumbers! (missing a digit)

------------------------------------------------------------------------------
5️⃣ (?=.*[\W_]) (At least one special character)
\W matches any non-alphanumeric character (like !@#$%^&*).
_ is included separately to allow underscores.
✅ Hello#123 ✅ World_99!
❌ NoSpecial1 (missing special character)

------------------------------------------------------------------------------
6️⃣ . {9, } (At least 9 characters)
{9,} ensures the password is at least 9 characters long.
✅ P@ssword99! (10 characters)
❌ Short1! (too short)

------------------------------------------------------------------------------
7️⃣ $ (End of string)
Ensures the entire string is checked.
Example Passwords:
✅ Valid Passwords:
✔️ Hello@World9 (✅ uppercase, ✅ lowercase, ✅ number, ✅ special char, ✅ length)
✔️ Secure#123 (✅ uppercase, ✅ lowercase, ✅ number, ✅ special char, ✅ length)

------------------------------------------------------------------------------
❌ Invalid Passwords:
❌ hello123! (missing uppercase)
❌ HELLO@WORLD (missing lowercase, missing number)
❌ HelloWorld (missing number, missing special character)
❌ Short1! (too short, less than 9 characters)


------------------------------------------------------------------------------

Why Use Lookaheads ((?=...)) Instead of a Single Pattern?
🔹 Lookaheads ensure that the password meets all conditions but don't consume characters.
🔹 This means the password can be in any order—uppercase, lowercase, digit, and special character can be anywhere.

------------------------------------------------------------------------------


TL;DR
This regex checks for: ✔️ 1+ uppercase (A-Z)
✔️ 1+ lowercase (a-z)
✔️ 1+ number (0-9)
✔️ 1+ special character (!@#$%^&*...)
✔️ At least 9 characters total

This ensures strong passwords! 💪

------------------------------------------------------------------------------